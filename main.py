import ctypes
from view.render import draw_cel_data, read_cel_data
from view.dir import read_dir
from view.vol import get_view_data
from sdl2 import SDL_PollEvent, SDL_Event
from sdl2.ext.renderer import Renderer
from sdl2.ext.window import Window
from sdl2.ext.color import Color
from sdl2 import SDL_Init, SDL_INIT_VIDEO, SDL_WINDOWPOS_CENTERED, SDL_WINDOW_SHOWN
from sdl2 import SDL_BLENDMODE_BLEND, SDL_Quit


# "key" item from inventory in SQ1
test_image = bytearray([
    0x4F, 0x4A, 0x00, 0x41, 0x0F, 0x08, 0x41, 0x00, 0x41, 0x0F, 0x08, 0x41, 0x00, 0x41, 0x0F, 0x08, 0x41, 0x00,
    0x41, 0x0F, 0x08, 0x41, 0x00, 0x41, 0x0F, 0x08, 0x41, 0x00, 0x41, 0x0F, 0x08, 0x41, 0x00, 0x41, 0x0F, 0x08,
    0x41, 0x00, 0x41, 0x08, 0x81, 0x72, 0x81, 0x72, 0x09, 0x41, 0x00, 0x41, 0x08, 0x81, 0x72, 0x81, 0x72, 0x09,
    0x41, 0x00, 0x41, 0x08, 0x81, 0x71, 0x82, 0x71, 0x0A, 0x41, 0x00, 0x41, 0x08, 0x81, 0x72, 0x81, 0x72, 0x09,
    0x41, 0x00, 0x41, 0x09, 0x81, 0x71, 0x01, 0x81, 0x71, 0x09, 0x41, 0x00, 0x41, 0x08, 0x81, 0x72, 0x81, 0x72,
    0x09, 0x41, 0x00, 0x41, 0x08, 0x81, 0x71, 0x82, 0x71, 0x0A, 0x41, 0x00, 0x41, 0x08, 0x81, 0x72, 0x81, 0x72,
    0x09, 0x41, 0x00, 0x41, 0x09, 0x81, 0x71, 0x81, 0x72, 0x09, 0x41, 0x00, 0x41, 0x08, 0x81, 0x72, 0x81, 0x72,
    0x09, 0x41, 0x00, 0x41, 0x07, 0x82, 0x75, 0x09, 0x41, 0x00, 0x41, 0x06, 0x82, 0x77, 0x08, 0x41, 0x00, 0x41,
    0x05, 0x82, 0x73, 0x83, 0x73, 0x07, 0x41, 0x00, 0x41, 0x04, 0x82, 0x73, 0x03, 0x82, 0x73, 0x06, 0x41, 0x00,
    0x41, 0x03, 0x82, 0xF3, 0x05, 0x82, 0xF3, 0x05, 0x41, 0x00, 0x41, 0x03, 0x81, 0x73, 0x07, 0x82, 0x73, 0x04,
    0x41, 0x00, 0x41, 0x03, 0x81, 0x73, 0x08, 0x81, 0x73, 0x04, 0x41, 0x00, 0x41, 0x03, 0x84, 0x07, 0x85, 0x04,
    0x41, 0x00, 0x41, 0x04, 0x81, 0x73, 0x05, 0x82, 0x73, 0x05, 0x41, 0x00, 0x41, 0x05, 0x81, 0x73, 0x03, 0x82,
    0x73, 0x06, 0x41, 0x00, 0x41, 0x06, 0x81, 0x73, 0x83, 0x73, 0x07, 0x41, 0x00, 0x41, 0x07, 0x81, 0x71, 0xF1,
    0x72, 0x81, 0x72, 0x08, 0x41, 0x00, 0x41, 0x08, 0x81, 0xF1, 0x72, 0x81, 0x71, 0x09, 0x41, 0x00, 0x41, 0x0F,
    0x08, 0x41, 0x00, 0x41, 0x0F, 0x08, 0x41, 0x00, 0x41, 0x0F, 0x08, 0x41, 0x00, 0x41, 0x0F, 0x08, 0x41, 0x00,
    0x41, 0x0F, 0x08, 0x41, 0x00, 0x4F, 0x4A, 0x00
])


def render_test(width, height, mirror, alpha, cel_data):
    SDL_Init(SDL_INIT_VIDEO)
    window = Window(
        "Render test",
        (1280, 1024),
        (SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED),
        SDL_WINDOW_SHOWN
    )

    renderer = Renderer(window)
    renderer.blendmode = SDL_BLENDMODE_BLEND
    renderer.color = Color(0xFF, 0xFF, 0xFF, 0xFF)
    renderer.clear()

    draw_cel_data(renderer, width, height, read_cel_data(cel_data), alpha)
    renderer.present()

    running, event = True, SDL_Event()

    while running:
        while SDL_PollEvent(ctypes.byref(event)) != 0:
            if event.type == 0x100:
                running = False
                break

    window.close()
    SDL_Quit()


def main():
    # for vol, view_offset in read_dir('test_games/sq1/VIEWDIR'):
    #     if vol == 0:
    #         desc_offset, cels = get_view_data('test_games/sq1/VOL.0', view_offset)
    #
    #         for width, height, mirror, alpha, cel_data in cels:
    #             render_test(width, height, mirror, alpha, cel_data)

    for vol, view_offset in read_dir('test_games/sq1/VIEWDIR'):
        print(vol, view_offset)

    for vol, logic_offset in read_dir('test_games/sq1/LOGDIR'):
        print(vol, logic_offset)

    for vol, pic_offset in read_dir('test_games/sq1/PICDIR'):
        print(vol, pic_offset)

    for vol, sound_offset in read_dir('test_games/sq1/SNDDIR'):
        print(vol, sound_offset)


if __name__ == '__main__':
    main()
